{"version":3,"sources":["Components/Weatherapp.js","App.js","reportWebVitals.js","index.js"],"names":["Weatherapp","useState","city","setCity","search","setSearch","day","date","month","year","time","setDate","useEffect","fetchApi","a","url","fetch","response","json","res","main","weekday","Array","mon","Date","getDay","getDate","getMonth","getFullYear","toLocaleTimeString","currentday","className","type","placeholder","onChange","event","target","value","temp","temp_min","temp_max","humidity","pressure","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNA2HeA,EAxHI,WACjB,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,UAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,mBAAS,CAC/BK,IAAI,GACJC,KAAK,GACLC,MAAM,GACNC,KAAK,GACLC,KAAK,KALP,mBAAOH,EAAP,KAAaI,EAAb,KAgEA,OAvDAC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,gCAAAC,EAAA,6DACTC,EADS,2DACiDX,EADjD,iEAEQY,MAAMD,GAFd,cAETE,EAFS,gBAGGA,EAASC,OAHZ,OAGTC,EAHS,OAKfhB,EAAQgB,EAAIC,MALG,2CAAH,qDAadP,KAEmB,WACjB,IAAIQ,EAAU,IAAIC,MAAM,GACxBD,EAAQ,GAAK,SACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,UACbA,EAAQ,GAAK,YACbA,EAAQ,GAAK,WACbA,EAAQ,GAAK,SACbA,EAAQ,GAAK,WAEb,IAAIE,EAAM,IAAID,MAAM,IACpBC,EAAI,GAAK,UACTA,EAAI,GAAK,WACTA,EAAI,GAAK,QACTA,EAAI,GAAK,QACTA,EAAI,GAAK,MACTA,EAAI,GAAK,OACTA,EAAI,GAAK,OACTA,EAAI,GAAK,SACTA,EAAI,GAAK,YACTA,EAAI,GAAK,UACTA,EAAI,IAAM,WACVA,EAAI,IAAM,WAEV,IAAIb,EAAO,IAAIc,KACfb,EAAQ,CACNL,IAAKe,EAAQX,EAAKe,UAClBlB,KAAMG,EAAKgB,UACXlB,MAAOe,EAAIb,EAAKiB,YAChBlB,KAAMC,EAAKkB,cACXlB,KAAMA,EAAKmB,uBAIfC,KACC,CAAC1B,IAKF,mCACE,sBAAK2B,UAAU,MAAf,UACE,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,QAAf,SACE,4CAEF,uBACEC,KAAK,SACLC,YAAY,aACZF,UAAU,aACVG,SAAU,SAACC,GACT9B,EAAU8B,EAAMC,OAAOC,aAK3BnC,EAGA,sBAAK6B,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,oBAIA,qBAAIA,UAAU,WAAd,UACE,mBAAGA,UAAU,mBADf,QAEU3B,KAEV,sBAAK2B,UAAU,OAAf,UACGxB,EAAKD,IACN,uBAAOC,EAAKA,KAFd,IAEqBA,EAAKC,MAF1B,IAEkCD,EAAKE,QAEvC,qBAAKsB,UAAU,OAAf,SAAuBxB,EAAKG,OAC5B,sBAAKqB,UAAU,OAAf,UAAuB7B,EAAKoC,KAA5B,YACA,qBAAKP,UAAU,eAAf,SACE,uCACQ7B,EAAKqC,SADb,iBACkCrC,EAAKsC,SADvC,cAIF,qBAAKT,UAAU,WAAf,SACE,4CAAe7B,EAAKuC,SAApB,UAEF,qBAAKV,UAAU,WAAf,SACE,4CAAe7B,EAAKwC,SAApB,eA1BJ,oBAAIX,UAAU,eAAd,iCC/EKY,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c0e1a5a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../css/styles.css\";\n\nconst Weatherapp = () => {\n  const [city, setCity] = useState(null);\n  const [search, setSearch] = useState(\"jorhat\");\n  const [date, setDate] = useState({\n    day:\"\",\n    date:\"\",\n    month:\"\",\n    year:\"\",\n    time:\"\"\n  });\n  // const [weatherStatus, setWeatherStatus] = useState(\"\");\n\n  useEffect(() => {\n    const fetchApi = async () => {\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=c3e0dd0776de2807c10eb563ba11980b`;\n      const response = await fetch(url);\n      const res = await response.json();\n      // const result = res.weather[0].main; \n      setCity(res.main);\n      // console.log(result);\n      // console.log(res.weather[0].main);\n      // const status = res.weather;\n      // console.log(status[0].main);\n      // status[0].main === \"Clouds\" ? setWeatherStatus(<div><i className=\"fas fa-cloud\"></i> <h3>Cloudy</h3></div>) : setWeatherStatus(<div><i className=\"fas fa-sun\" ></i> <h3>Sunny</h3></div>);\n    };\n\n    fetchApi();\n\n    const currentday = () => {\n      let weekday = new Array(7);\n      weekday[0] = \"Sunday\";\n      weekday[1] = \"Monday\";\n      weekday[2] = \"Tuesday\";\n      weekday[3] = \"Wednesday\";\n      weekday[4] = \"Thursday\";\n      weekday[5] = \"Friday\";\n      weekday[6] = \"Saturday\";\n\n      let mon = new Array(12);\n      mon[0] = \"January\";\n      mon[1] = \"February\";\n      mon[2] = \"March\";\n      mon[3] = \"April\";\n      mon[4] = \"May\";\n      mon[5] = \"June\";\n      mon[6] = \"July\";\n      mon[7] = \"August\";\n      mon[8] = \"September\";\n      mon[9] = \"October\";\n      mon[10] = \"November\";\n      mon[11] = \"December\";\n  \n      let time = new Date();\n      setDate({\n        day: weekday[time.getDay()],\n        date: time.getDate(),\n        month: mon[time.getMonth()],\n        year: time.getFullYear(),\n        time: time.toLocaleTimeString()\n      });\n    };\n\n    currentday();\n  }, [search]);\n\n \n\n  return (\n    <>\n      <div className=\"box\">\n        <div className=\"searchfield\">\n          <div className=\"brand\">\n            <h1>ForeXast</h1>\n          </div>\n          <input\n            type=\"search\"\n            placeholder=\"Enter city\"\n            className=\"inputfield\"\n            onChange={(event) => {\n              setSearch(event.target.value);\n            }}\n          />\n        </div>\n\n        {!city ? (\n          <h5 className=\"invalid-data\">No Data Found</h5>\n        ) : (\n          <div className=\"info\">\n            <div className=\"desc\">\n              {/* {weatherStatus} */}\n              cloudy\n            </div>\n            <h2 className=\"location\">\n              <i className=\"far fa-compass\"></i>\n              &nbsp; {search}\n            </h2>\n            <div className=\"date\">\n              {date.day}\n              <br />{date.date} {date.month} {date.year}\n            </div>\n            <div className=\"time\">{date.time}</div>\n            <div className=\"temp\">{city.temp} °C</div>\n            <div className=\"temp-max-min\">\n              <h4>\n                Min: {city.temp_min} °C | Max: {city.temp_max} °C\n              </h4>\n            </div>\n            <div className=\"humidity\">\n              <h5>Humidity: {city.humidity} %</h5>\n            </div>\n            <div className=\"pressure\">\n              <h5>Pressure: {city.pressure} hPa</h5>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Weatherapp;\n","import React from 'react';\nimport Weatherapp from './Components/Weatherapp';\n\nfunction App() {\n  return (\n    <Weatherapp/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}